package controller;

import java.io.IOException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import application.User;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import model.classes.DBReader;
import model.classes.DBWriter;

public class addPasswordController {
	
	/**
	 * Fxml tags for add Password Controller controllers and all the fx-id in addPassword fxml
	 */
	@FXML AnchorPane pane;
	@FXML Button save;
	@FXML Button cancel;
	@FXML TextField applicationName;
	@FXML TextField emailID;
	@FXML TextField userName;
	@FXML TextField password;
	@FXML TextField expiryDate;
	@FXML Button generatePassowrd;
	
	/*
	 * New object instantiated 
	 */
	DBReader dbRead = new DBReader();
	Alert alert = new Alert (Alert.AlertType.ERROR);
	
	/**
	 * creationDate is the date when the user makes a new account
	 * @return the creation date of user's new account
	 */
	public String creationDate() {
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Calendar cal = Calendar.getInstance();
		return dateFormat.format(cal.getTime());
	}

	/**
	 * Save the user's new account credential into data base
	 * The data is retrive from the textfield on User Interface
	 * Then the data and the text fields are validated, and stored in the database beginning without a hashtag
	 */
	public void savePasswordToDB() {
		DateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		if(applicationName.getText().isEmpty() == false && userName.getText().isEmpty() == false && password.getText().isEmpty() == false && emailID.getText().isEmpty() == false && expiryDate.getText().isEmpty() == false) {
			User user;
			try {
				user = new User(applicationName.getText(), userName.getText(), password.getText(), emailID.getText(), creationDate(), sdf.format(sdf.parse(expiryDate.getText())));
				String loggedInUserName = LoginController.userLoggedIn.getUsername();
				DBWriter.writeUserAccountToDB(user, loggedInUserName);
				cancelAddPassword();
			} catch (ParseException e) {
				alert.setHeaderText(null);
				alert.setContentText("Date format is invalid. Please try again.");
				alert.show();
			}
		}
		else
		{
			alert.setHeaderText(null);
			alert.setContentText("Information is missing!");
			alert.show();
		}
	}
	
	@FXML public void generateRandomPassword() {
		// TODO Autogenerated
		URL url = getClass().getClassLoader().getResource("view/generateRandomPassword.fxml");
		try
		{
			AnchorPane generateRandomPasswordPane = (AnchorPane) FXMLLoader.load(url);
			pane.getChildren().add(generateRandomPasswordPane);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * controller to exit from addPassword page to passwordManager page
	 */
	@FXML public void cancelAddPassword() {
		// TODO Autogenerated
		URL url = getClass().getClassLoader().getResource("view/passwordManager.fxml");
		try
		{
			AnchorPane managerPane = (AnchorPane) FXMLLoader.load(url);
			pane.getChildren().add(managerPane);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
		
}
