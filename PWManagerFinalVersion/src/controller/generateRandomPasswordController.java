package controller;

import java.io.IOException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;

import application.User;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import model.classes.DBReader;
import model.classes.DBWriter;

public class generateRandomPasswordController {
	@FXML TextField password;
	@FXML TextField numberOfAlphabets;
	@FXML TextField numberOfSpecialCharacters;
	@FXML TextField numberOfDigits;
	@FXML Button  generate;
	@FXML Button cancel;
	@FXML AnchorPane pane;
	@FXML TextField applicationName;
	@FXML TextField emailID;
	@FXML TextField userName;
	@FXML TextField expiryDate;
	Alert alert = new Alert (Alert.AlertType.ERROR);
	
	/*
	 * New object instantiated 
	 */
	DBReader dbRead = new DBReader();

	//The characters in our random generated password
		private String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		private String beta = "abcdefghijklmnopqrstuvwxyz";
		private String num = "0123456789";
		private String specialCharacters = "<>,.?/}]{]+_-)(*&^%$#@!=";
		
	    int lengthOfPassword = 0;
	    int lengthOfAlphabets = 0;
	    int lengthOfSpecialCharacters = 0;
	    int lengthOfDigits = 0;
	    
	    public String generatedPassword = "";
	    
	    
	/**
	 * creationDate is the date when the user makes a new account
	 * @return the creation date of user's new account
	 */
	public String creationDate() {
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Calendar cal = Calendar.getInstance();
		return dateFormat.format(cal.getTime());
	}
	
	/**
	 * Save the user's new account credential into data base
	 * The data is retrive from the textfield on User Interface
	 * Then the data and the text fields are validated, and stored in the database beginning without a hashtag
	 */
	public void savePasswordToDB() {
		DateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		if(applicationName.getText().isEmpty() == false && userName.getText().isEmpty() == false && emailID.getText().isEmpty() == false && expiryDate.getText().isEmpty() == false) {
			User user;
			try {
				user = new User(applicationName.getText(), userName.getText(), generatedPassword, emailID.getText(), creationDate(), sdf.format(sdf.parse(expiryDate.getText())));
				String loggedInUserName = LoginController.userLoggedIn.getUsername();
				DBWriter.writeUserAccountToDB(user, loggedInUserName);
				cancel();
			} catch (ParseException e) {
				alert.setHeaderText(null);
				alert.setContentText("Date format is invalid. Please try again.");
				alert.show();
			}
		}
		else
		{
			alert.setHeaderText(null);
			alert.setContentText("Information is missing!");
			alert.show();
		}
	}
	/**
	 * controller to exit from generateRandomPassword to passwordManager
	 */
	@FXML public void cancel() {
		// TODO Autogenerated
		URL url = getClass().getClassLoader().getResource("view/passwordManager.fxml");
		try
		{
			AnchorPane managerPane = (AnchorPane) FXMLLoader.load(url);
			pane.getChildren().add(managerPane);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	/**
	 * Generate random password for the user based on user's requirements
	 * If the user requirements do not satisfy the random password length requirement, 
	 * then there's a warning for invalid input
	 * Otherwise, the random password is generated successfully and added to database
	 */
	@FXML public void generate() {
		if(password.getText().isEmpty() != true && numberOfAlphabets.getText().isEmpty() != true && numberOfSpecialCharacters.getText().isEmpty() != true && numberOfDigits.getText().isEmpty() != true){
			lengthOfPassword = Integer.parseInt(password.getText());
		    lengthOfAlphabets = Integer.parseInt(numberOfAlphabets.getText());
		    lengthOfSpecialCharacters = Integer.parseInt(numberOfSpecialCharacters.getText());
		    lengthOfDigits = Integer.parseInt(numberOfDigits.getText());
		}else {
			alert.setHeaderText("Error");
			alert.setContentText("Information is missing! Please fill again properly");
			alert.show();
		}
	    char[] password = new char[lengthOfPassword];
		Random rand = new Random();
		
		if(lengthOfPassword < (lengthOfAlphabets + lengthOfDigits + lengthOfSpecialCharacters)) { 
			//Show Alerts
			alert.setHeaderText(null);
			alert.setContentText("Password parameters should not exceed length of random Password");
			alert.show();
		}
		else {
				for(int i = 0; i < lengthOfAlphabets; i ++)
					password[i] = alpha.charAt(rand.nextInt(alpha.length()));
				for(int i = 0; i < lengthOfSpecialCharacters; i ++)
					password[i + lengthOfAlphabets] = specialCharacters.charAt(rand.nextInt(specialCharacters.length()));
				for(int i = 0; i < lengthOfDigits; i ++)
					password[i + lengthOfAlphabets + lengthOfSpecialCharacters] = num.charAt(rand.nextInt(num.length()));
				int leftover = lengthOfPassword - (lengthOfAlphabets + lengthOfDigits + lengthOfSpecialCharacters);
				for(int i = 0; i < leftover; i ++)
					password[i + lengthOfAlphabets + lengthOfSpecialCharacters + lengthOfDigits] = beta.charAt(rand.nextInt(beta.length()));
				
				generateRandomPasswordController.shuffle(password);
				String stringPassword = "";
				for (int i = 0; i < password.length; i++)
				{
					stringPassword += password[i];
				}
				generatedPassword = stringPassword;
				savePasswordToDB();
		}

	}
	/**
	 * The shuffle method helps us to randomize the password more by shuffling the elements in array
	 * @param password the random Password designed by the generate method
	 */
	public static void shuffle(char[] password) {
		for(int i = 0; i < password.length; i ++) {
			int s = i + (int)(Math.random() * (password.length - i));
			 char temp = password[s];
			password[s] = password[i];
			password[i] = temp;
		}
	}
}


	
	
